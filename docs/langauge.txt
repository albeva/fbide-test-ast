Goal 1:

(* the program *)
Program             = { DeclOrStmtList } .

(* list of statements or declarations *)
DeclOrStmtList      = DeclOrStmt { DeclOrStmt } .

(* Declaration or a Statement *)
DeclOrStmt          = Declaration
                    | Statement
                    .

(* function / variable declaration *)
Declaration         = ( FunctionDeclaration
                      | Function
                      ) EndOfStmt
                    .

(* List of statements *)
StatementList       = Statement { Statement } .

(* statement *)
Statement           = ( VariableDeclaration
                      | Expression
                      | Assignment
                      ) EndOfStmt
                    .

(* End of the statement *)
EndOfStmt           = "\n" | ":" | eof .


(* Variable declaration *)
VariableDeclaration = "DIM" id "AS" TypeExpression [ "=" Expression ] .

(* Function delcaration *)
FunctionDeclaration = "DECLARE" "FUNCTION" id "(" [ ArgumentDeclList ] ")" "AS" TypeExpression .

(* Function argument list declaration *)
ArgumentDeclList    = ArgumentDecl { "," ArgumentDecl } .

(* Function argument declaration *)
ArgumentDecl        = id "AS" TypeExpression .

(* Type Expression *)
TypeExpression      = "INTEGER"
                    | "STRING"
                    .

(* Expression *)
Expression          = FunctionCall
                    | id
                    | string-literal
                    | integer-literal
                    .

(* function call *)
FunctionCall        = id "(" [ FunctionArgumentList ] ")" .

(* function arguments list *)
FunctionArgumentList= Expression { "," Expression } .

(* Assignment *)
Assignment          = id "=" Expression .

(* Function implementation *)
Function            = "FUNCTION" id "(" [ ArgumentDeclList ] ")" "AS" TypeExpression EndOfStmt
                      [ StatementList ]
                      "END" "FUNCTION" .
